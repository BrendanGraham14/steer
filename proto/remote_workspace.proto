syntax = "proto3";
package coder.remote_workspace.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Agent service for remote workspace tool execution
service RemoteWorkspaceService {
  // Execute a tool call on the agent
  rpc ExecuteTool(ExecuteToolRequest) returns (ExecuteToolResponse);

  // Get information about the agent and available tools
  rpc GetAgentInfo(google.protobuf.Empty) returns (AgentInfo);

  // Health check
  rpc Health(google.protobuf.Empty) returns (HealthResponse);

  // Get detailed tool schemas including approval requirements
  rpc GetToolSchemas(google.protobuf.Empty) returns (ToolSchemasResponse);

  // Get tool approval requirements
  rpc GetToolApprovalRequirements(ToolApprovalRequirementsRequest) returns (ToolApprovalRequirementsResponse);

  // Get environment information for the remote workspace
  rpc GetEnvironmentInfo(GetEnvironmentInfoRequest) returns (GetEnvironmentInfoResponse);
}

message ExecuteToolRequest {
  string tool_call_id = 1;
  string tool_name = 2;
  string parameters_json = 3;
  string context_json = 4;
  optional uint64 timeout_ms = 5;
}

message ExecuteToolResponse {
  bool success = 1;
  string result = 2;
  string error = 3;
  google.protobuf.Timestamp started_at = 4;
  google.protobuf.Timestamp completed_at = 5;
  map<string, string> metadata = 6;
}

message AgentInfo {
  string version = 1;
  repeated string supported_tools = 2;
  map<string, string> metadata = 4;
}


message HealthResponse {
  HealthStatus status = 1;
  string message = 2;
  map<string, string> details = 3;
}

enum HealthStatus {
  HEALTH_STATUS_UNSPECIFIED = 0;
  HEALTH_STATUS_SERVING = 1;
  HEALTH_STATUS_NOT_SERVING = 2;
  HEALTH_STATUS_SERVICE_UNKNOWN = 3;
}

// Tool schema information
message ToolSchema {
  string name = 1;
  string description = 2;
  string input_schema_json = 3;
}

// Response containing all tool schemas
message ToolSchemasResponse {
  repeated ToolSchema tools = 1;
}

// Request for tool approval requirements
message ToolApprovalRequirementsRequest {
  repeated string tool_names = 1;
}

// Response containing tool approval requirements
message ToolApprovalRequirementsResponse {
  // Map from tool name to whether it requires approval
  map<string, bool> approval_requirements = 1;
}

// Request for environment information
message GetEnvironmentInfoRequest {
  // Optional working directory override
  optional string working_directory = 1;
}

// Response containing environment information
message GetEnvironmentInfoResponse {
  string working_directory = 1;
  bool is_git_repo = 2;
  string platform = 3;
  string date = 4;
  string directory_structure = 5;
  optional string git_status = 6;
  optional string readme_content = 7;
  optional string claude_md_content = 8;
}
