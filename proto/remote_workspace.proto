syntax = "proto3";
package conductor.remote_workspace.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Agent service for remote workspace tool execution
service RemoteWorkspaceService {
  // Execute a tool call on the agent
  rpc ExecuteTool(ExecuteToolRequest) returns (ExecuteToolResponse);

  // Get information about the agent and available tools
  rpc GetAgentInfo(google.protobuf.Empty) returns (AgentInfo);

  // Health check
  rpc Health(google.protobuf.Empty) returns (HealthResponse);

  // Get detailed tool schemas including approval requirements
  rpc GetToolSchemas(google.protobuf.Empty) returns (ToolSchemasResponse);

  // Get tool approval requirements
  rpc GetToolApprovalRequirements(ToolApprovalRequirementsRequest) returns (ToolApprovalRequirementsResponse);

  // Get environment information for the remote workspace
  rpc GetEnvironmentInfo(GetEnvironmentInfoRequest) returns (GetEnvironmentInfoResponse);

  // List files in the workspace for fuzzy finding
  rpc ListFiles(ListFilesRequest) returns (stream ListFilesResponse);
}

message ExecuteToolRequest {
  string tool_call_id = 1;
  string tool_name = 2;
  string parameters_json = 3;
  string context_json = 4;
  optional uint64 timeout_ms = 5;
}

message ExecuteToolResponse {
  bool success = 1;
  
  oneof result {
    string string_result = 2;  // Legacy/simple tools
    TypedToolResult typed_result = 3;  // External tools with JSON
    SearchResult search_result = 4;
    FileListResult file_list_result = 5;
    FileContentResult file_content_result = 6;
    EditResult edit_result = 7;
    BashResult bash_result = 8;
    GlobResult glob_result = 9;
    TodoListResult todo_list_result = 10;
    TodoWriteResult todo_write_result = 11;
  }
  
  string error = 12;
  google.protobuf.Timestamp started_at = 13;
  google.protobuf.Timestamp completed_at = 14;
  map<string, string> metadata = 15;
}

// Generic typed result for external tools
message TypedToolResult {
  bytes json_data = 1;  // JSON-encoded result implementing ToolOutput
  string type_name = 2;  // Type name (e.g., "CustomSearchResult")
  optional string summary = 3;  // Optional brief summary for display
}

// Search results (grep, astgrep)
message SearchResult {
  repeated SearchMatch matches = 1;
  uint64 total_files_searched = 2;
  bool search_completed = 3;
}

message SearchMatch {
  string file_path = 1;
  uint64 line_number = 2;
  string line_content = 3;
  optional ColumnRange column_range = 4;
}

message ColumnRange {
  uint64 start = 1;
  uint64 end = 2;
}

// File listing result
message FileListResult {
  repeated FileEntry entries = 1;
  string base_path = 2;
}

message FileEntry {
  string path = 1;
  bool is_directory = 2;
  optional uint64 size = 3;
  optional string permissions = 4;
}

// File content result
message FileContentResult {
  string content = 1;
  string file_path = 2;
  uint64 line_count = 3;
  bool truncated = 4;
}

// Edit operation result
message EditResult {
  string file_path = 1;
  uint64 changes_made = 2;
  bool file_created = 3;
  optional string old_content = 4;
  optional string new_content = 5;
}

// Bash command result
message BashResult {
  string stdout = 1;
  string stderr = 2;
  int32 exit_code = 3;
  string command = 4;
}

// Glob pattern matching result
message GlobResult {
  repeated string matches = 1;
  string pattern = 2;
}

// Todo list result
message TodoListResult {
  repeated TodoItem todos = 1;
}

// Todo write result
message TodoWriteResult {
  repeated TodoItem todos = 1;
  string operation = 2;  // e.g., "modified", "created"
}

message TodoItem {
  string id = 1;
  string content = 2;
  string status = 3;  // "pending", "in_progress", "completed"
  string priority = 4;  // "high", "medium", "low"
}

message AgentInfo {
  string version = 1;
  repeated string supported_tools = 2;
  map<string, string> metadata = 4;
}


message HealthResponse {
  HealthStatus status = 1;
  string message = 2;
  map<string, string> details = 3;
}

enum HealthStatus {
  HEALTH_STATUS_UNSPECIFIED = 0;
  HEALTH_STATUS_SERVING = 1;
  HEALTH_STATUS_NOT_SERVING = 2;
  HEALTH_STATUS_SERVICE_UNKNOWN = 3;
}

// Tool schema information
message ToolSchema {
  string name = 1;
  string description = 2;
  string input_schema_json = 3;
}

// Response containing all tool schemas
message ToolSchemasResponse {
  repeated ToolSchema tools = 1;
}

// Request for tool approval requirements
message ToolApprovalRequirementsRequest {
  repeated string tool_names = 1;
}

// Response containing tool approval requirements
message ToolApprovalRequirementsResponse {
  // Map from tool name to whether it requires approval
  map<string, bool> approval_requirements = 1;
}

// Request for environment information
message GetEnvironmentInfoRequest {
  // Optional working directory override
  optional string working_directory = 1;
}

// Response containing environment information
message GetEnvironmentInfoResponse {
  string working_directory = 1;
  bool is_git_repo = 2;
  string platform = 3;
  string date = 4;
  string directory_structure = 5;
  optional string git_status = 6;
  optional string readme_content = 7;
  optional string claude_md_content = 8;
}

// File listing for fuzzy finder
message ListFilesRequest {
  string query = 1;        // optional fuzzy query (empty = full list)
  uint32 max_results = 2;  // 0 = unlimited
}

message ListFilesResponse {
  repeated string paths = 1; // workspace-relative paths
}
