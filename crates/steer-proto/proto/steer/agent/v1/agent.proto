syntax = "proto3";
package steer.agent.v1;

import "google/protobuf/timestamp.proto";
import "steer/common/v1/common.proto";

service AgentService {
  // Bidirectional streaming for interactive sessions
  rpc StreamSession(stream StreamSessionRequest) returns (stream StreamSessionResponse);

  // Unary calls for session management
  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);
  rpc ListSessions(ListSessionsRequest) returns (ListSessionsResponse);
  rpc GetSession(GetSessionRequest) returns (stream GetSessionResponse);
  rpc DeleteSession(DeleteSessionRequest) returns (DeleteSessionResponse);

  // Unary calls for non-streaming operations
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
  rpc ApproveTool(ApproveToolRequest) returns (ApproveToolResponse);
  rpc CancelOperation(CancelOperationRequest) returns (CancelOperationResponse);
  rpc GetConversation(GetConversationRequest) returns (stream GetConversationResponse);

  // Explicitly activate (load) a dormant session into memory and return its state
  rpc ActivateSession(ActivateSessionRequest) returns (stream ActivateSessionResponse);

  // List files in the workspace for fuzzy finding
  rpc ListFiles(ListFilesRequest) returns (stream ListFilesResponse);

  // Get MCP server connection status
  rpc GetMcpServers(GetMcpServersRequest) returns (GetMcpServersResponse);

  // Provider and model management
  rpc ListProviders(ListProvidersRequest) returns (ListProvidersResponse);
  rpc ListModels(ListModelsRequest) returns (ListModelsResponse);
  rpc ResolveModel(ResolveModelRequest) returns (ResolveModelResponse);
}

// Client to server messages in the bidirectional stream
message StreamSessionRequest {
  string session_id = 1;

  oneof message {
    SendMessageRequest send_message = 2;
    ToolApprovalResponse tool_approval = 3;
    CancelOperationRequest cancel = 4;
    SubscribeRequest subscribe = 5;
    UpdateConfigRequest update_config = 6;
    ExecuteCommandRequest execute_command = 7;
    ExecuteBashCommandRequest execute_bash_command = 8;
    EditMessageRequest edit_message = 9;
  }
}

// Server to client events in the bidirectional stream
message StreamSessionResponse {
  uint64 sequence_num = 1;
  google.protobuf.Timestamp timestamp = 2;

  oneof event {
    MessageAddedEvent message_added = 3;
    MessageUpdatedEvent message_updated = 4;
    MessagePartEvent message_part = 5;
    ToolCallStartedEvent tool_call_started = 6;
    ToolCallCompletedEvent tool_call_completed = 7;
    ToolCallFailedEvent tool_call_failed = 8;
    ProcessingStartedEvent processing_started = 9;
    ProcessingCompletedEvent processing_completed = 10;
    CommandResponseEvent command_response = 11;
    RequestToolApprovalEvent request_tool_approval = 12;
    OperationCancelledEvent operation_cancelled = 13;
    ModelChangedEvent model_changed = 14;
    ErrorEvent error = 15;
    WorkspaceChangedEvent workspace_changed = 16;
    WorkspaceFilesEvent workspace_files = 17;
    StartedEvent started = 18;
    FinishedEvent finished = 19;
    ActiveMessageIdChangedEvent active_message_id_changed = 20;
  }
}

// Event message definitions
message MessageAddedEvent {
  Message message = 1;
  ModelSpec model = 2;
}

message CommandExecution {
  string command = 1;
  string stdout = 2;
  string stderr = 3;
  int32 exit_code = 4;
}

message AppCommand {
  AppCommandType command = 1;
  optional CommandResponse response = 2;
}

message AppCommandType {
  oneof command_type {
    ModelCommand model = 1;
    bool clear = 2;
    bool compact = 3;
  }
}

message ModelCommand {
  optional string target = 1;
}

message CommandResponse {
  oneof response {
    string text = 1;
    CompactResult compact = 2;
  }
}

message CompactResult {
  oneof result_type {
    string success = 1;
    bool cancelled = 2;
    bool insufficient_messages = 3;
  }
}

message UserMessage {
  repeated UserContent content = 1;
  uint64 timestamp = 2;
  optional string parent_message_id = 3;
}

message UserContent {
  oneof content {
    string text = 1;
    CommandExecution command_execution = 2;
    AppCommand app_command = 3;
  }
}

message AssistantMessage {
  repeated AssistantContent content = 1;
  uint64 timestamp = 2;
  optional string parent_message_id = 3;
}

message AssistantContent {
  oneof content {
    string text = 1;
    ToolCall tool_call = 2;
    ThoughtContent thought = 3;
  }
}

message ThoughtContent {
  oneof thought_type {
    SimpleThought simple = 1;
    SignedThought signed = 2;
    RedactedThought redacted = 3;
  }
}

message SimpleThought {
  string text = 1;
}

message SignedThought {
  string text = 1;
  string signature = 2;
}

message RedactedThought {
  string data = 1;
}

message ToolMessage {
  string tool_use_id = 1;
  ToolResult result = 2;
  uint64 timestamp = 3;
  optional string parent_message_id = 4;
}

message MessageUpdatedEvent {
  string id = 1;
  string content = 2;
}

message MessagePartEvent {
  string id = 1;
  string delta = 2;
}

message ToolCallStartedEvent {
  string name = 1;
  string id = 2;
  ModelSpec model = 3;
  string parameters_json = 4;  // JSON-encoded serde_json::Value
}

message ToolCallCompletedEvent {
  string name = 1;
  ToolResult result = 2;
  string id = 3;
  ModelSpec model = 4;
}

message ToolCallFailedEvent {
  string name = 1;
  string error = 2;
  string id = 3;
  ModelSpec model = 4;
}

message RequestToolApprovalEvent {
  string name = 1;
  string parameters_json = 2;  // JSON-encoded serde_json::Value
  string id = 3;
}

message ProcessingStartedEvent {
  // No fields needed
}

message ProcessingCompletedEvent {
  // No fields needed
}

message CommandResponseEvent {
  string content = 1;
  string id = 2;
  AppCommandType command = 3;
  CommandResponse response = 4;
}

message ModelChangedEvent {
  ModelSpec model = 1;
}

message ErrorEvent {
  string message = 1;
}

message OperationCancelledEvent {
  CancellationInfo info = 1;
}

message ActiveMessageIdChangedEvent {
  optional string message_id = 1;
}

// Request/Response message definitions
message CreateSessionRequest {
  optional ToolApprovalPolicy tool_policy = 1;
  map<string, string> metadata = 2;
  optional SessionToolConfig tool_config = 3;
  optional WorkspaceConfig workspace_config = 4;
  optional string system_prompt = 5;
}

message CreateSessionResponse {
  SessionInfo session = 1;
}

message SendMessageRequest {
  string session_id = 1;
  string message = 2;
  repeated Attachment attachments = 3;
}

message SendMessageResponse {
  Operation operation = 1;
}

message ToolApprovalResponse {
  string tool_call_id = 1;
  ApprovalDecision decision = 2;
}

message ApprovalDecision {
  oneof decision_type {
    bool deny = 1;
    bool once = 2;  // One-time approval
    bool always_tool = 3;  // Always approve this tool
    string always_bash_pattern = 4;  // Always approve this bash pattern
  }
}

message SubscribeRequest {
  repeated string event_types = 1;
  optional uint64 since_sequence = 2;
}

message UpdateConfigRequest {
  optional ToolApprovalPolicy tool_policy = 1;
  optional SessionToolConfig tool_config = 2;
  map<string, string> metadata_updates = 3;
}

message CancelOperationRequest {
  string session_id = 1;
  string operation_id = 2;
}

message ApproveToolRequest {
  string session_id = 1;
  string tool_call_id = 2;
  ApprovalDecision decision = 3;
}

message ApproveToolResponse {
  // Empty response
}

message CancelOperationResponse {
  // Empty response
}

message ListSessionsRequest {
  optional SessionFilter filter = 1;
  optional uint32 page_size = 2;
  optional string page_token = 3;
}

message ListSessionsResponse {
  repeated SessionInfo sessions = 1;
  optional string next_page_token = 2;
}

message GetSessionRequest {
  string session_id = 1;
}

message GetSessionResponse {
  oneof chunk {
    SessionStateHeader header = 1;
    Message message = 2;
    ToolCallStateEntry tool_call = 3;
    SessionStateFooter footer = 4;
  }
}

message SessionStateHeader {
  string id = 1;
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp updated_at = 3;
  SessionConfig config = 4;
}

message ToolCallStateEntry {
  string key = 1;
  ToolCallState value = 2;
}

message SessionStateFooter {
  repeated string approved_tools = 1;
  uint64 last_event_sequence = 2;
  map<string, string> metadata = 3;
}

message DeleteSessionRequest {
  string session_id = 1;
}

message DeleteSessionResponse {
  // Empty response
}

message GetConversationRequest {
  string session_id = 1;
}

message ActivateSessionRequest {
  string session_id = 1;
}

message ActivateSessionResponse {
  oneof chunk {
    Message message = 1;
    ActivateSessionFooter footer = 2;
  }
}

message ActivateSessionFooter {
  repeated string approved_tools = 1;
}

message GetConversationResponse {
  oneof chunk {
    Message message = 1;
    GetConversationFooter footer = 2;
  }
}

message GetConversationFooter {
  repeated string approved_tools = 1;
}

// Core data types
message SessionInfo {
  string id = 1;
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp updated_at = 3;
  SessionStatus status = 4;
  SessionMetadata metadata = 5;
}

message SessionState {
  string id = 1;
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp updated_at = 3;
  SessionConfig config = 4;
  repeated Message messages = 5;
  map<string, ToolCallState> tool_calls = 6;
  repeated string approved_tools = 7;
  uint64 last_event_sequence = 8;
  map<string, string> metadata = 9;
}

message SessionConfig {
  ToolApprovalPolicy tool_policy = 1;
  SessionToolConfig tool_config = 2;
  map<string, string> metadata = 3;
  WorkspaceConfig workspace_config = 4;
  optional string system_prompt = 5;
}

message SessionMetadata {
  map<string, string> labels = 1;
  map<string, string> annotations = 2;
}

message SessionFilter {
  repeated string session_ids = 1;
  map<string, string> metadata_filters = 2;
  SessionStatus status = 3;
  google.protobuf.Timestamp created_after = 4;
  google.protobuf.Timestamp created_before = 5;
}

message Operation {
  string id = 1;
  string session_id = 2;
  OperationType type = 3;
  OperationStatus status = 4;
  google.protobuf.Timestamp created_at = 5;
  optional google.protobuf.Timestamp completed_at = 6;
  map<string, string> metadata = 7;
}

message Message {
  string id = 1;
  oneof message {
    UserMessage user = 2;
    AssistantMessage assistant = 3;
    ToolMessage tool = 4;
  }
  google.protobuf.Timestamp created_at = 5;
  map<string, string> metadata = 6;
}

message ToolCall {
  string id = 1;
  string name = 2;
  string parameters_json = 3; // JSON-encoded parameters
}

message ToolResult {
  oneof result {
    steer.common.v1.SearchResult search = 1;
    steer.common.v1.FileListResult file_list = 2;
    steer.common.v1.FileContentResult file_content = 3;
    steer.common.v1.EditResult edit = 4;
    steer.common.v1.BashResult bash = 5;
    steer.common.v1.GlobResult glob = 6;
    steer.common.v1.TodoListResult todo_read = 7;
    steer.common.v1.TodoWriteResult todo_write = 8;
    FetchResult fetch = 9;
    AgentResult agent = 10;
    ExternalResult external = 50;
    ToolError error = 99;
  }
}

message FetchResult {
  string url = 1;
  string content = 2;
}

message AgentResult {
  string content = 1;
}

message ExternalResult {
  string tool_name = 1;
  string payload = 2;
}

message ToolError {
  oneof error_type {
    string unknown_tool = 1;
    InvalidParamsError invalid_params = 2;
    ExecutionError execution = 3;
    string cancelled = 4;
    string timeout = 5;
    string denied_by_user = 6;
    string internal_error = 7;
    IoError io = 8;
  }
}

message InvalidParamsError {
  string tool_name = 1;
  string message = 2;
}

message ExecutionError {
  string tool_name = 1;
  string message = 2;
}

message IoError {
  string tool_name = 1;
  string message = 2;
}

message McpConnectionFailedError {
  string server_name = 1;
  string message = 2;
}

message ToolCallState {
  ToolCall tool_call = 1;
  ToolCallStatus status = 2;
  optional google.protobuf.Timestamp started_at = 3;
  optional google.protobuf.Timestamp completed_at = 4;
  optional ToolResult result = 5;
}

message Attachment {
  string name = 1;
  string content_type = 2;
  bytes data = 3;
  map<string, string> metadata = 4;
}

message Usage {
  uint32 input_tokens = 1;
  uint32 output_tokens = 2;
  uint32 total_tokens = 3;
  optional double cost_usd = 4;
}

message ActiveToolInfo {
  string name = 1;
  string id = 2;
}

message CancellationInfo {
  bool api_call_in_progress = 1;
  repeated ActiveToolInfo active_tools = 2;
  bool pending_tool_approvals = 3;
}

// Tool configuration
message SessionToolConfig {
  repeated BackendConfig backends = 1;
  map<string, string> metadata = 2;
  ToolVisibility visibility = 3;
  ToolApprovalPolicy approval_policy = 4;
  map<string, ToolSpecificConfig> tools = 5;
}

// Tool-specific configuration
message ToolSpecificConfig {
  oneof config {
    BashToolConfig bash = 1;
  }
}

// Bash tool configuration
message BashToolConfig {
  repeated string approved_patterns = 1;
}

message ToolVisibility {
  oneof visibility {
    bool all = 1;
    bool read_only = 2;
    ToolWhitelist whitelist = 3;
    ToolBlacklist blacklist = 4;
  }
}

message ToolWhitelist {
  repeated string tools = 1;
}

message ToolBlacklist {
  repeated string tools = 1;
}

message BackendConfig {
  oneof backend {
    LocalBackendConfig local = 1;
    McpBackendConfig mcp = 2;
  }
}

message ToolFilter {
  oneof filter {
    bool all = 1;
    IncludeFilter include = 2;
    ExcludeFilter exclude = 3;
  }
}

message IncludeFilter {
  repeated string tools = 1;
}

message ExcludeFilter {
  repeated string tools = 1;
}

message LocalBackendConfig {
  ToolFilter tool_filter = 1;
}

message McpBackendConfig {
  string server_name = 1;
  string transport = 2;
  string command = 3;
  repeated string args = 4;
  ToolFilter tool_filter = 5;
}

message RemoteAuth {
  oneof auth {
    string bearer_token = 1;
    string api_key = 2;
  }
}

// Approval policy
message ToolApprovalPolicy {
  oneof policy {
    AlwaysAskPolicy always_ask = 1;
    PreApprovedPolicy pre_approved = 2;
    MixedPolicy mixed = 3;
  }
}

message AlwaysAskPolicy {
  optional uint64 timeout_ms = 1;
  ApprovalDecision default_decision = 2;
}

message PreApprovedPolicy {
  repeated string tools = 1;
}

message MixedPolicy {
  repeated string pre_approved_tools = 1;
  bool ask_for_others = 2;
  optional uint64 timeout_ms = 3;
  ApprovalDecision default_decision = 4;
}

// Enums
enum SessionStatus {
  SESSION_STATUS_UNSPECIFIED = 0;
  SESSION_STATUS_ACTIVE = 1;
  SESSION_STATUS_INACTIVE = 2;
}

enum OperationType {
  OPERATION_TYPE_UNSPECIFIED = 0;
  OPERATION_TYPE_SEND_MESSAGE = 1;
  OPERATION_TYPE_TOOL_EXECUTION = 2;
}

enum OperationStatus {
  OPERATION_STATUS_UNSPECIFIED = 0;
  OPERATION_STATUS_PENDING = 1;
  OPERATION_STATUS_RUNNING = 2;
  OPERATION_STATUS_COMPLETED = 3;
  OPERATION_STATUS_FAILED = 4;
  OPERATION_STATUS_CANCELLED = 5;
}

enum MessageRole {
  MESSAGE_ROLE_UNSPECIFIED = 0;
  MESSAGE_ROLE_USER = 1;
  MESSAGE_ROLE_ASSISTANT = 2;
  MESSAGE_ROLE_SYSTEM = 3;
  MESSAGE_ROLE_TOOL = 4;
}

enum ToolCallStatus {
  TOOL_CALL_STATUS_UNSPECIFIED = 0;
  TOOL_CALL_STATUS_PENDING_APPROVAL = 1;
  TOOL_CALL_STATUS_APPROVED = 2;
  TOOL_CALL_STATUS_DENIED = 3;
  TOOL_CALL_STATUS_EXECUTING = 4;
  TOOL_CALL_STATUS_COMPLETED = 5;
  TOOL_CALL_STATUS_FAILED = 6;
}

enum McpTransport {
  MCP_TRANSPORT_UNSPECIFIED = 0;
  MCP_TRANSPORT_STDIO = 1;
  MCP_TRANSPORT_HTTP = 2;
  MCP_TRANSPORT_WEBSOCKET = 3;
}

message WorkspaceConfig {
  oneof config {
    LocalWorkspaceConfig local = 1;
    RemoteWorkspaceConfig remote = 2;
  }
}

message LocalWorkspaceConfig {
  string path = 1;
}

message RemoteWorkspaceConfig {
  string agent_address = 1;
  optional RemoteAuth auth = 2;
}


message ExecuteCommandRequest {
  string session_id = 1;
  string command = 2;
}

message ExecuteBashCommandRequest {
  string session_id = 1;
  string command = 2;
}

message EditMessageRequest {
  string session_id = 1;
  string message_id = 2;
  string new_content = 3;
}

// File listing for fuzzy finder
message ListFilesRequest {
  string session_id = 1;   // target session
  string query = 2;        // optional fuzzy query (empty = full list)
  uint32 max_results = 3;  // 0 = unlimited
}

message ListFilesResponse {
  repeated string paths = 1; // workspace-relative paths
}

message WorkspaceChangedEvent {
  // No fields needed - just signals that workspace files have changed
}

message WorkspaceFilesEvent {
  repeated string files = 1;
}

// Provider and model configuration
message ProviderConfig {
  string id = 1;  // "anthropic", "openai", "gemini", "xai", or custom name
  string name = 2;  // Display name
  string api_format = 3;  // "openai", "anthropic", "gemini", "xai"
  repeated string auth_schemes = 4;  // "api_key", "oauth2"
  optional string base_url = 5;  // Optional override URL
}

message ProviderModel {
  string provider_id = 1;  // References ProviderConfig.id
  string model_id = 2;  // Model identifier (e.g., "claude-3-5-sonnet-20241022")
  string display_name = 3;  // User-friendly name
  bool supports_thinking = 4;  // Whether model supports thinking/reasoning
  repeated string aliases = 5;  // Short aliases like "sonnet", "opus"
}

message ModelSpec {
  string provider_id = 1;  // Provider identifier
  string model_id = 2;  // Model identifier
}

message StartedEvent {
  bytes id = 1;  // UUID stored as bytes
  StartedOperation op = 2;
}

message FinishedEvent {
  bytes id = 1;  // UUID stored as bytes
  OperationOutcome outcome = 2;
}

message StartedOperation {
  oneof operation {
    BashOperation bash = 1;
    CompactOperation compact = 2;
  }
}

message BashOperation {
  string cmd = 1;
}

message CompactOperation {
  // No fields needed
}

message OperationOutcome {
  oneof outcome {
    BashOutcome bash = 1;
    CompactOutcome compact = 2;
  }
}

message BashOutcome {
  uint64 elapsed_ms = 1;
  optional BashError error = 2;
}

message CompactOutcome {
  uint64 elapsed_ms = 1;
  optional CompactError error = 2;
}

message BashError {
  int32 exit_code = 1;
  string stderr = 2;
}

message CompactError {
  string message = 1;
}

// MCP server status messages
message GetMcpServersRequest {
  string session_id = 1;
}

message GetMcpServersResponse {
  repeated McpServerInfo servers = 1;
}

message McpServerInfo {
  string server_name = 1;
  McpTransportInfo transport = 2;
  McpConnectionState state = 3;
  google.protobuf.Timestamp last_updated = 4;
}

message McpTransportInfo {
  oneof transport {
    McpStdioTransport stdio = 1;
    McpTcpTransport tcp = 2;
    McpUnixTransport unix = 3;
    McpSseTransport sse = 4;
    McpHttpTransport http = 5;
  }
}

message McpStdioTransport {
  string command = 1;
  repeated string args = 2;
}

message McpTcpTransport {
  string host = 1;
  uint32 port = 2;
}

message McpUnixTransport {
  string path = 1;
}

message McpSseTransport {
  string url = 1;
  map<string, string> headers = 2;
}

message McpHttpTransport {
  string url = 1;
  map<string, string> headers = 2;
}

message McpConnectionState {
  oneof state {
    McpConnecting connecting = 1;
    McpConnected connected = 2;
    McpFailed failed = 3;
  }
}

message McpConnecting {
  // No fields needed
}

message McpConnected {
  repeated string tool_names = 1;
}

message McpFailed {
  string error = 1;
}
// Provider and model management messages
message ListProvidersRequest {
  // Empty for now, might add filters later
}

message ListProvidersResponse {
  repeated ProviderConfig providers = 1;
}

message ListModelsRequest {
  optional string provider_id = 1;  // Filter by provider
}

message ListModelsResponse {
  repeated ProviderModel models = 1;
}

message ResolveModelRequest {
  string input = 1;  // Can be "provider/model", "alias", etc.
}

message ResolveModelResponse {
  ModelSpec model = 1;
}
